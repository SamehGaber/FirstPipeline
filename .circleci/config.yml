# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
jobs:

  destroy_environments:
    docker:
      - image: amazon/aws-cli
    steps:
     - checkout
     - run:  aws cloudformation delete-stack --stack-name test --template-body file://template.yml   --region=us-west-2
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
     - checkout
     - run:  aws cloudformation create-stack --stack-name test --template-body file://template.yml   --region=us-west-2
     - run:  return 1 # to simulate error
     - destroy_environments
       when: on_fail

  simulate_error:
    docker:
      - image: amazon/aws-cli
    steps:
     - checkout
     - run:  return 1 # to simulate error
     - destroy_environments
       when: on_fail


  smoke_test:
    docker:
     - image: alpine:latest
    steps:
     - checkout
     - run :  apk --no-cache add curl
     - run:
        name: smoke test curl
        command: |
          if curl -s --head "https://google321.com" 
          then
            echo "It worked!"
          else
            echo "It failed"
          fi
                 

  execute_playbook:
    docker:
      - image: python:3.7-alpine3.11
    steps:
     - checkout
     - add_ssh_keys:
          fingerprints:
            - "d8:cb:68:a2:f9:79:ca:c6:e6:23:bc:f5:18:6c:4f:f3"
     - run: 
          name: install dependencies 
          command: | 
            apk add --update ansible 
     - run: 
          name: Configure server
          command: |
            ansible-playbook main-remote.yml -i inventory 

# Use a package of configuration called an orb.

# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - destroy_environments
      - simulate_error

